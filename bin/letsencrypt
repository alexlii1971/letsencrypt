#!/usr/bin/env php
<?php

use League\CLImate\CLImate;
use Imbrish\LetsEncrypt\Command;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;

// autoload and check environment

if (! file_exists(__DIR__ . '/../vendor/autoload.php')) {
    echo 'You need to install the composer dependencies!' . PHP_EOL;
    exit(-1);
}

require __DIR__ . '/../vendor/autoload.php';

$climate = new CLImate;

if (! function_exists('openssl_pkey_get_private')) {
	$climate->error('You need to enable OpenSSL in your php.ini!');
    exit(-2);
}

if (! in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) {
    $climate->error('Please run this script on the command line!');
    exit(1);
}

// define and parse arguments

$climate->arguments->add([
    'notify' => [
        'prefix'       => 'n',
        'longPrefix'   => 'notify',
        'description'  => 'Send notification to email defined in config file',
        'noValue'      => true,
    ],
]);

$climate->arguments->parse();

// load configuration

try {
    $config = Yaml::parse(file_get_contents('config.yml'));
} catch (ParseException $e) {
    $climate->error('There was an error when parsing config file!');
    exit(2);
}

$config['server'] = 'letsencrypt';

// set environment variables

putenv('USER=' . $config['cpanel']['user']);
putenv('PASS=' . $config['cpanel']['password']);

// setup command class

Command::$aliases = [
    'acme' => __DIR__ . '/acme',
    'sslic' => realpath(__DIR__ . '/../vendor/neurobin/sslic/sslic.php'),
];

Command::$defaults = [
    'acme' => [
        '--server' => $config['server'],
        '--storage' => $config['storage'],
    ],
];

// report processing error

function error($message) {
    global $climate, $config;

    if ($climate->arguments->get('notify')) {
        mail($config['notify'], $message, Command::$last . PHP_EOL . Command::$output);
    }

    $climate->error($message);
    exit(3);
}

// delete all files and remove folder

function clear($dir) {
    if (file_exists($dir) && is_dir($dir)) {
        array_map('unlink', glob($dir . '/*'));
        rmdir($dir);
    }
}

// register a certification account

Command::exec('acme', [
	'setup',
	'--email' => $config['email'],
]);

if (Command::$result) {
    error('Failed to setup acme client');
}

// check, issue and setup certificates

$success = [];

foreach ($config['certificates'] as $certificate) {

    // extract domains array

    $domains = [];

    foreach ($certificate['domains'] as $path => $names) {
        foreach ((array) $names as $name) {
            $domains[$name] = $path;
        }
    }

    $name = array_keys($domains)[0];

    // check whether certificate should be renewed

	Command::exec('acme', [
        'check',
        '--name' => $name,
        '--ttl' => $config['renew'],
        '--names' => implode(',', array_keys($domains)),
    ]);

    if (Command::$result == 255) {
        error('Error when checking certificate for domain ' . $name);
    }
    
    if (! Command::$result) {
        continue;
    }

    // issue new certificate

    Command::exec('acme', [
        'issue',
        '--domains' => implode(':', array_keys($domains)),
        '--path' => implode(':', array_values($domains)),
        '--bits' => $certificate['bits'],
    ]);

    if (Command::$result) {
        clear($config['storage'] . '/' . $name);
        error('Error when issuing certificate for domain ' . $name);
    }

    // install certificate in cpanel for corresponding domains

    $domains = array_unique(array_map(function ($domain) {
        // remove www prefix
        return substr(strtolower($domain), 0, 4) == 'www.'
            ? substr($domain, 4)
            : $domain;
    }, array_keys($domains)));

    foreach ($domains as $domain) {
        Command::exec('sslic', [
            $domain,
            $config['storage'] . '/' . $name . '/cert.pem',
            $config['storage'] . '/' . $name . '/key.pem',
            $config['storage'] . '/' . $name . '/chain.pem',
        ]);

        if (Command::$result) {
            clear($config['storage'] . '/' . $name);
            error('Error when installing certificate for domain ' . $domain);
        }
    }

    $success[] = 'Certificate for domain ' . $name . ' issued and installed.';

    $climate->out(end($success));
}

if ($success) {
    if ($climate->arguments->get('notify')) {
        mail($config['notify'], 'New certificates have been issued', implode(PHP_EOL, $success));
    }
}
else {
    $climate->out('No certificates were issued.');
}
